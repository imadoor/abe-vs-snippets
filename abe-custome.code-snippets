{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"Importing a module": {
		"scope": "javascript",
		"prefix": "require",
		"body": [
			"const { $1 } = require('$2');"
		],
		"description": "importing modules in nodejs"
	},
	"Arrow": {
		"scope": "javascript",
		"prefix": "arrow",
		"body": [
			"const $1 = $2($3) =>{ ",
			" $4 ",
			"}"
		],
		"description": "Creating an arrow funcition"
	},
	"Async Function": {
		"scope": "javascript",
		"prefix": "async function",
		"body": [
			"async function $1 ($2) {",
			" $3 ",
			"}"
		],
		"description": "Creating a async function"
	},
	"Constructor": {
		"scope": "javascript",
		"prefix": "constructor",
		"body": [
			"constructor( $1 ) {",
			" $2 ",
			"}"
		],
		"description": "Creating a constructor for a class object"
	},
	"Method": {
		"scope": "javascript",
		"prefix": "method",
		"body": [
			"$1($2) {",
			" $3 ",
			"}"
		],
		"description": "Creating a method for a class object"
	},
	"Simple Arrow Function": {
		"scope": "javascript",
		"prefix": "simple arrow",
		"body": [
			"($1) =>{ ",
			" $2 ",
			"}"
		],
		"description": "Creating a simple arrow function"
	},
	"String Interpolation": {
		"scope": "javascript,typescript",
		"prefix": "interpolation",
		"body": [
			"`${$1}`"
		],
		"description": "Creating string interpolation with one variable"
	}
}